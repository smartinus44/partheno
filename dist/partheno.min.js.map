{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@babel/runtime/helpers/interopRequireDefault.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/@babel/runtime/helpers/createClass.js","webpack:///./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack:///./node_modules/isarray/index.js","webpack:///./node_modules/ieee754/index.js","webpack:///./node_modules/base64-js/index.js","webpack:///./node_modules/buffer/index.js","webpack:///./src/Bookmark.class.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","obj","default","g","this","Function","eval","e","window","_defineProperties","target","props","length","descriptor","writable","key","Constructor","protoProps","staticProps","instance","TypeError","toString","Array","isArray","arr","read","buffer","offset","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","Infinity","Math","pow","write","rt","abs","isNaN","floor","log","LN2","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","Arr","_byteLength","curByte","len","revLookup","charCodeAt","fromByteArray","uint8","extraBytes","parts","len2","push","encodeChunk","lookup","join","Uint8Array","code","Error","indexOf","start","end","num","output","global","base64","ieee754","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","from","ArrayBuffer","array","byteOffset","undefined","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","slice","fromString","isBuffer","checked","copy","val","type","data","fromObject","assertSize","size","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","b","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","String","buf","readUInt16BE","foundIndex","found","j","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","utf8Slice","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","typedArraySupport","poolSize","_augment","Symbol","species","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","arguments","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","inspect","max","match","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","INVALID_BASE64_RE","leadSurrogate","trim","replace","stringtrim","base64clean","src","dst","CanvasRenderingContext2D","roundRect","w","h","beginPath","moveTo","arcTo","closePath","BookMark","build","_classCallCheck2","uniqueId","patterns","height","width","chamfer","chamferWidth","chamferRt","chamferRb","chamferLt","chamferLb","roundBorder","roundBorderWidth","roundBorderRt","roundBorderRb","roundBorderLt","roundBorderLb","enableTriangles","numberOfPairOfTriangles","numberOfpairs","showStrokes","columnsPerWidth","canDownload","backgroundPattern","background","evenPattern","triangleEvenPattern","_getRandomPattern","oddPattern","triangleOddPattern","images","wrapper","_init","_createCanvasWrapper","zone","_initPatterns","result","random","_getFullDecodedPath","_roundBorderRt","_roundBorderRb","_roundBorderLt","_roundBorderLb","path","stringPattern","searchedPattern","pattern","map","elem","_hasRoundBorder","_drawRoundedRect","_hasChamfer","_drawChamferedRect","_buidMirroredPattern","elCtx","_applyStyle","fillRect","_this","strokeRect","parseFloat","forEach","index","currentImage","drawImage","radius","lt","rb","lb","lineTo","elementId","zoneId","_this2","_zone","document","createElement","id","className","_canvas","_roundBorder","backgroundPatternTriangleEven","backgroundPatternTriangleOdd","innerHTML","setTimeout","clearCanvasLayers","appendChild","el_canvas","getContext","_canDownload","_createDownloadLink","clientWidth","clientHeight","clearRect","filteredFull","filter","title","_this3","filteredPatterns","getFiltered","_imagesLoading","ss_pattern","ss_image","Image","ss_elpattern","onload","repeatBackgroundWidth","repeatBackgroundHeight","_encode","_triggeredOnPattersLoaded","image","elpattern","createPattern","_triggeredOnPatternsLoaded","_this4","classes","getElementById","_link","classList","href","role","addEventListener","toDataURL","download","insertBefore","firstChild","_setBackgroundPatterns","style","fillStyle","isEven","_this5","triangles","_column_width","_offset","_first_coef","_second_coef","_triangle_height","clip","_half_width","lineWidth","_third_coef","k","_drawSingleTriangle","_drawStrokes","restore","_canDisplayStrokes","strokeStyle","stroke","_this6","_drawBackgroundPattern","_canDrawTriangle","_drawTriangles","loadedPattern","render","Builder","_createClass2"],"mappings":"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","file":"partheno.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","const STROKE_COLOR = \"#FF0000\";\nconst LINE_WIDTH = 1;\nconst TIMEOUT = 100;\n\nCanvasRenderingContext2D.prototype.roundRect = function(x, y, w, h, r) {\n    if (w < 2 * r) r = w / 2;\n    if (h < 2 * r) r = h / 2;\n    this.beginPath();\n    this.moveTo(x + r, y);\n    this.arcTo(x + w, y, x + w, y + h, r);\n    this.arcTo(x + w, y + h, x, y + h, r);\n    this.arcTo(x, y + h, x, y, r);\n    this.arcTo(x, y, x + w, y, r);\n    this.closePath();\n    return this;\n}\n\n// Initialization of a bookmark.\nexport default class BookMark {\n\n    /**\n     * Constructor.\n     * @param {number} _uniqueId\n     * @returns {BookMark}\n     */\n    constructor(build) {\n\n        this.uniqueId = build.uniqueId;\n        this.patterns = build.patterns;\n        this.height = build.height;\n        this.width = build.width;\n        this.chamfer = build.chamferWidth;\n        this.chamferRt = build.chamferRt;\n        this.chamferRb = build.chamferRb;\n        this.chamferLt = build.chamferLt;\n        this.chamferLb = build.chamferLb;\n        this.roundBorder = build.roundBorderWidth;\n        this.roundBorderRt = build.roundBorderRt;\n        this.roundBorderRb = build.roundBorderRb;\n        this.roundBorderLt = build.roundBorderLt;\n        this.roundBorderLb = build.roundBorderLb;\n        this.enableTriangles = build.enableTriangles;\n        this.numberOfPairOfTriangles = build.numberOfpairs;\n        this.showStrokes = build.showStrokes;\n        this.columnsPerWidth = build.columnsPerWidth;\n        this.canDownload = build.canDownload;\n        this.backgroundPattern = build.background;\n\n        if (!build.evenPattern) {\n            this.triangleEvenPattern = this._getRandomPattern('triangles');\n        } else {\n            this.triangleEvenPattern = build.evenPattern;\n        }\n\n        if (!build.oddPattern) {\n            this.triangleOddPattern = this._getRandomPattern('triangles');\n        } else {\n            this.triangleOddPattern = build.oddPattern;\n        }\n\n        this.images = [];\n        this.wrapper = null;\n\n        this._init();\n    }\n\n    static get Builder() {\n        class Builder {\n            /**\n             * @param {number} uniqueId \n             */\n            constructor(uniqueId) {\n                    this.uniqueId = uniqueId;\n                }\n                /**\n                 * @param {number} height \n                 * @param {number} width \n                 */\n            sized(height, width) {\n                    this.height = height;\n                    this.width = width;\n                    return this;\n                }\n                /**\n                 * @param {number} columnsPerWidth \n                 */\n            columnsPerWidth(columnsPerWidth) {\n                    this.columnsPerWidth = columnsPerWidth;\n                    return this;\n                }\n                /**\n                 * @param {boolean} canDownload \n                 */\n            downloadable(canDownload) {\n                    this.canDownload = canDownload;\n                    return this;\n                }\n                /**\n                 * @param {boolean} canDownload \n                 */\n            withStrokes(showStrokes) {\n                    this.showStrokes = showStrokes;\n                    return this;\n                }\n                /**\n                 * @param {string} background \n                 */\n            withBackground(background) {\n                    this.background = background;\n                    return this;\n                }\n                /**\n                 * @param {number} numberOfpairs \n                 */\n            withNumberOfPairs(numberOfpairs) {\n                    this.numberOfpairs = numberOfpairs;\n                    return this;\n                }\n                /**\n                 * @param {number} numberOfpairs \n                 */\n            withTriangles(enableTriangles) {\n                    this.enableTriangles = enableTriangles;\n                    return this;\n                }\n                /**\n                 * @param {Object} patterns \n                 * @param {string} evenPattern \n                 * @param {string} oddPattern \n                 */\n            withPatterns(patterns, evenPattern, oddPattern) {\n                    this.patterns = patterns;\n                    this.evenPattern = evenPattern;\n                    this.oddPattern = oddPattern;\n                    return this;\n                }\n                /**\n                 * @param {number} chamferWidth \n                 * @param {boolean} chamferRt \n                 * @param {boolean} chamferRb \n                 * @param {boolean} chamferLt \n                 * @param {boolean} chamferLb \n                 */\n            withChamfers(chamferWidth, chamferRt, chamferRb, chamferLt, chamferLb) {\n                    this.chamferWidth = chamferWidth;\n                    this.chamferRt = chamferRt;\n                    this.chamferRb = chamferRb;\n                    this.chamferLt = chamferLt;\n                    this.chamferLb = chamferLb;\n                    return this;\n                }\n                /**\n                 * @param {number} roundBorderWidth \n                 * @param {boolean} roundBorderRt \n                 * @param {boolean} roundBorderRb \n                 * @param {boolean} roundBorderLt \n                 * @param {boolean} roundBorderLb \n                 */\n            withRoundBorder(roundBorderWidth, roundBorderRt, roundBorderRb, roundBorderLt, roundBorderLb) {\n                this.roundBorderWidth = roundBorderWidth;\n                this.roundBorderRt = roundBorderRt;\n                this.roundBorderRb = roundBorderRb;\n                this.roundBorderLt = roundBorderLt;\n                this.roundBorderLb = roundBorderLb;\n                return this;\n            }\n\n            build() {\n                return new BookMark(this);\n            }\n        }\n        return Builder;\n    }\n\n    /**\n     * First init canvas and ctx.\n     * @private\n     */\n    _init() {\n        this._createCanvasWrapper('canva-' + this.uniqueId, 'zone-' + this.uniqueId);\n        this.zone = 'background';\n        this._initPatterns();\n        this.zone = 'triangles';\n        this._initPatterns();\n    }\n\n    /**\n     * Randomly returns a pattern.\n     * @param {string} zone\n     * @returns {string|null}\n     * @private\n     */\n    _getRandomPattern(zone) {\n        let result, value;\n        if (typeof this.patterns[zone] !== 'undefined') {\n            value = Math.floor(Math.random() * this.patterns[zone].length);\n            result = this._getFullDecodedPath(this.patterns[zone][value].data);\n        }\n        return result;\n    }\n\n    /**\n     * Return true if at least one chamfer is enabled.\n     * @returns {boolean}\n     * @private\n     */\n    _hasChamfer() {\n        return (this.chamferRt || this.chamferRb || this.chamferLt || this.chamferLb);\n    }\n\n    /**\n     * Return true if at least one round border is enabled.\n     * @returns {boolean}\n     * @private\n     */\n    _hasRoundBorder() {\n        return (this._roundBorderRt || this._roundBorderRb || this._roundBorderLt || this._roundBorderLb);\n    }\n\n    /**\n     * Return clean full path of a pattern.\n     * @param {string} path\n     * @returns {string}\n     * @private\n     */\n    _getFullDecodedPath(path) {\n        return Buffer.from(this.patterns.path + path, 'binary').toString('base64');\n    }\n\n    /**\n     * Encode a string.\n     * @param {string} stringPattern \n     */\n    _encode(stringPattern) {\n        return Buffer.from(stringPattern, 'base64').toString('binary');\n    }\n\n    /**\n     * Find a pattern in a list of patterns.\n     * @param {string} searchedPattern\n     * @return {string}\n     * @private\n     */\n    _findPattern(searchedPattern) {\n        let pattern;\n        this.patterns.background.map((elem) => {\n            if (elem.data === searchedPattern) {\n                pattern = elem.data;\n            }\n        });\n        return pattern;\n    }\n\n    /**\n     * Initialize the background.\n     * @param {string|Array} backgroundPattern\n     * @private\n     */\n    _setBackgroundPatterns(backgroundPattern) {\n\n        if (this._hasRoundBorder()) {\n\n            this._drawRoundedRect(\n                0,\n                0,\n                this.width,\n                this.height,\n                this.roundBorder,\n                this.roundBorderRt,\n                this.roundBorderRb,\n                this.roundBorderLt,\n                this.roundBorderLb\n            );\n        }\n\n        if (this._hasChamfer()) {\n            this._drawChamferedRect(\n                0,\n                0,\n                this.width,\n                this.height,\n                this.chamfer,\n                this.chamferRt,\n                this.chamferRb,\n                this.chamferLt,\n                this.chamferLb\n            );\n\n        }\n\n        // Patterns could be stored in an array or in a single string because of mirrored patterns.\n        if (Array.isArray(backgroundPattern)) {\n            this._buidMirroredPattern(backgroundPattern);\n            this.elCtx.fill();\n        } else {\n            this._applyStyle(this.images[this._getFullDecodedPath(backgroundPattern)]);\n            this.elCtx.fillRect(0, 0, this.width, this.height);\n        }\n    }\n\n    /**\n     * Build a mirrored background pattern.\n     * @param {Object} patterns\n     * @private\n     */\n    _buidMirroredPattern(patterns) {\n        // Black background\n        this.elCtx.strokeRect(0, 0, this.width, this.height);\n\n        let pow = parseFloat(this.width / 2);\n        let width = this.width;\n        let height = this.height;\n\n        patterns.forEach((pattern, index) => {\n            let currentImage = this.images[this._getFullDecodedPath(pattern)];\n            if (currentImage) {\n                // Top left.\n                if (index === 0) {\n                    this.elCtx.drawImage(currentImage, 0, 0, width, height);\n                }\n                // Top right.\n                if (index === 1) {\n                    this.elCtx.drawImage(currentImage, pow, 0, width, height);\n                }\n                // Bottom left.\n                if (index === 2) {\n                    this.elCtx.drawImage(currentImage, 0, 200, width, height);\n                }\n                // Bottom right.\n                if (index === 3) {\n                    this.elCtx.drawImage(currentImage, pow, 200, width, height);\n                }\n            }\n        });\n    }\n\n\n\n\n    /**\n     * Build a rounded background pattern.\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     * @param {number} radius\n     * @param {boolean} rt\n     * @param {boolean} lt\n     * @param {boolean} rb\n     * @param {boolean} lb\n     * @private\n     */\n    _drawRoundedRect(x, y, w, h, radius, rt, lt, rb, lb) {\n        //   this.elCtx.roundRect(x, y, w, h, radius).stroke(); //or .fill() for a filled rect\n\n        /*let r = x + w;\n        let b = y + h;\n        this.elCtx.beginPath();\n        this.elCtx.strokeStyle = \"green\";\n        this.elCtx.lineWidth = \"2\";\n\n        if (rt) {\n            if (lt) {\n                this.elCtx.moveTo(x, y);\n            } else {\n                this.elCtx.moveTo(x + radius, y);\n            }\n            this.elCtx.lineTo(r - radius, y);\n            this.elCtx.quadraticCurveTo(r, y, r, y + radius);\n        } else {\n            if (lb) {\n                this.elCtx.moveTo(x + radius, y);\n            } else {\n                this.elCtx.moveTo(x, y);\n\n            }\n            this.elCtx.lineTo(r, y);\n        }\n\n        if (rb) {\n            this.elCtx.lineTo(r, y + h - radius);\n            this.elCtx.quadraticCurveTo(r, b, r - radius, b);\n        } else {\n            this.elCtx.lineTo(r, y + h);\n        }\n\n        if (lt) {\n            this.elCtx.lineTo(x + radius, b);\n            this.elCtx.quadraticCurveTo(x, b, x, b - radius);\n        } else {\n            this.elCtx.lineTo(x, b);\n        }\n\n        if (lb) {\n            this.elCtx.lineTo(x, y + radius);\n            this.elCtx.quadraticCurveTo(x, y, x + radius, y);\n        } else {\n            this.elCtx.lineTo(x, y);\n        }\n        this.elCtx.stroke();*/\n    }\n\n    /**\n     * Build a chamfered background pattern.\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     * @param {number} radius\n     * @param {boolean} rt\n     * @param {boolean} lt\n     * @param {boolean} rb\n     * @param {boolean} lb\n     * @private\n     */\n    _drawChamferedRect(x, y, w, h, radius, rt, lt, rb, lb) {\n        let r = x + w;\n        let b = y + h;\n        this.elCtx.moveTo(x + radius, y);\n        if (rt) {\n            this.elCtx.lineTo(r - radius, y);\n            this.elCtx.lineTo(r, y + radius);\n        } else {\n            this.elCtx.lineTo(r - radius, y);\n            this.elCtx.lineTo(r, y);\n        }\n\n        if (lb) {\n            this.elCtx.lineTo(r, y + h - radius);\n            this.elCtx.lineTo(r - radius, b);\n        } else {\n            this.elCtx.lineTo(r, y + h);\n        }\n\n        if (lt) {\n            this.elCtx.lineTo(x + radius, b);\n            this.elCtx.lineTo(x, b - radius);\n        } else {\n            this.elCtx.lineTo(x, b);\n        }\n\n        if (rb) {\n            this.elCtx.lineTo(x, y + radius);\n            this.elCtx.lineTo(x + radius, y);\n        } else {\n            this.elCtx.lineTo(x, y);\n        }\n    }\n\n    /**\n     * Draw a canvas.\n     * @param {string} elementId\n     * @param {string} zoneId\n     * @private\n     */\n    _createCanvasWrapper(elementId, zoneId) {\n\n        let _zone = document.createElement('div');\n        _zone.id = zoneId;\n        _zone.className = \"zone\";\n\n        let _canvas = document.createElement('canvas');\n        _canvas.id = elementId;\n        _canvas.className = \"zone--canvas\";\n        _canvas.width = this.width;\n        _canvas.height = this.height;\n        _canvas.showStrokes = this.showStrokes;\n\n        _canvas.chamfer = this.chamfer;\n        _canvas.chamferRt = this.chamferRt;\n        _canvas.chamferRb = this.chamferRb;\n        _canvas.chamferLt = this.chamferLt;\n        _canvas.chamferLb = this.chamferLb;\n\n        _canvas.roundBorder = this._roundBorder;\n        _canvas.roundBorderRt = this.roundBorderRt;\n        _canvas.roundBorderRb = this.roundBorderRb;\n        _canvas.roundBorderLt = this.roundBorderLt;\n        _canvas.roundBorderLb = this.roundBorderLb;\n\n        _canvas.backgroundPatternTriangleEven = this.triangleEvenPattern;\n        _canvas.backgroundPatternTriangleOdd = this.triangleOddPattern;\n        _canvas.innerHTML = \"Votre navigateur ne supporte pas canvas.<br>Essayez avec Firefox, Safari, Chrome ou Opera.\";\n\n        setTimeout(() => {\n            this.clearCanvasLayers();\n            if (_zone) {\n                _zone.appendChild(_canvas);\n            }\n        }, TIMEOUT);\n\n        this.wrapper = _zone;\n        this.el_canvas = _canvas;\n        this.elCtx = this.el_canvas.getContext('2d');\n\n        setTimeout(() => {\n            // Show download link if can download picture is set to true.\n            if (this._canDownload()) {\n                this._createDownloadLink('link-' + this.uniqueId, 'zone-' + this.uniqueId);\n            }\n        });\n\n    }\n\n    /**\n     * Erase a canvas.\n     */\n    clearCanvasLayers() {\n        if (this.el_canvas) {\n            let w = this.el_canvas.clientWidth;\n            let h = this.el_canvas.clientHeight;\n            this.elCtx.clearRect(0, 0, w, h);\n        }\n    }\n\n    /**\n     * Get filtered patterns.\n     * @returns {Array}\n     */\n    getFiltered() {\n        let filteredFull = [];\n        for (let i = 0; i < this.patterns[this.zone].length; i++) {\n            let pattern = this.patterns[this.zone][i];\n            if (pattern.data) {\n                filteredFull.push(pattern.data);\n            }\n        }\n        return filteredFull;\n    }\n\n    /**\n     * Get filtered patterns object.\n     * @param {string} zone\n     * @returns {Array}\n     */\n    getFilteredPatternsObjects(zone) {\n        let filteredFull = {};\n\n        this.patterns[zone].filter((pattern) => {\n            if (pattern.data) {\n                filteredFull[pattern.title] = pattern.data;\n            }\n            return true;\n        });\n        return filteredFull;\n    }\n\n    /**\n     * Initialize the patterns, we decrement a variable. When it is zero we continue the loading script of the canvas.\n     * @private\n     */\n    _initPatterns() {\n        let filteredPatterns = this.getFiltered();\n\n        if (filteredPatterns && Array.isArray(filteredPatterns)) {\n            let _imagesLoading = filteredPatterns.length;\n\n            filteredPatterns.forEach((pattern) => {\n                if (Array.isArray(pattern)) {\n                    pattern.forEach((ss_pattern) => {\n                        let ss_image = new Image();\n                        let ss_elpattern = this._getFullDecodedPath(ss_pattern);\n                        ss_image.onload = () => {\n                            this.images[ss_elpattern] = ss_image;\n                            this.repeatBackgroundWidth = this.width / ss_image.width;\n                            this.repeatBackgroundHeight = this.height / ss_image.height;\n                        };\n                        ss_image.src = this._encode(ss_elpattern);\n\n                        if (_imagesLoading === 0) {\n                            this._triggeredOnPattersLoaded(this._encode(ss_elpattern));\n                        }\n                    });\n\n                    --_imagesLoading;\n                } else {\n                    let image = new Image();\n                    let elpattern = this._getFullDecodedPath(pattern);\n                    image.onload = () => {\n                        this.images[elpattern] = this.elCtx.createPattern(image, 'repeat');\n                        --_imagesLoading;\n                        if (_imagesLoading === 0) {\n                            this._triggeredOnPatternsLoaded(this._encode(elpattern));\n                        }\n                    };\n                    image.src = this._encode(elpattern);\n                }\n\n            });\n        }\n    }\n\n    /**\n     * Create a link to download an image of the canvas.\n     * @param {string} uniqueId \n     * @param {string} zoneId \n     * @param {string} classes \n     * @param {string} title \n     */\n    _createDownloadLink(uniqueId, zoneId, classes = 'btn btn-dark btn-sm', title = 'Download') {\n        let _zone = document.getElementById(zoneId);\n        let _link = document.createElement('a');\n\n        _link.innerHTML = title;\n        _link.classList = classes;\n        _link.id = uniqueId;\n        _link.href = \"#\";\n        _link.role = \"button\";\n        _link.addEventListener('click', () => {\n            _link.href = this.el_canvas.toDataURL('image/jpeg');\n            _link.download = \"bookmark.jpg\";\n        }, false);\n\n        if (_zone) {\n            _zone.insertBefore(_link, _zone.firstChild);\n        }\n    }\n\n    /**\n     * Draw Background.\n     * @private\n     */\n    _drawBackgroundPattern() {\n        this._setBackgroundPatterns(this.backgroundPattern);\n    }\n\n    /**\n     * Apply a pattern to a context of a canvas.\n     * @param {Object.<CanvasPattern>} style\n     * @private\n     */\n    _applyStyle(style) {\n        this.elCtx.fillStyle = style;\n    }\n\n    /**\n     * Draw a single even or odd triangle.\n     * @param {boolean} isEven\n     * @private\n     */\n    _drawSingleTriangle(isEven) {\n        let pattern;\n        this.patterns.triangles.map((b) => {\n            if (b.data === ((isEven === true) ? this.el_canvas.backgroundPatternTriangleEven : this.el_canvas.backgroundPatternTriangleOdd)) {\n                pattern = b.data;\n            }\n        });\n\n        this._applyStyle(this.images[this._getFullDecodedPath(pattern)]);\n\n        if (isEven) {\n            this.elCtx.lineTo(this._column_width + this._offset, this._first_coef);\n            this.elCtx.lineTo(this._offset, this._first_coef);\n        } else {\n            this.elCtx.lineTo(this._column_width + this._offset, this._second_coef);\n            this.elCtx.lineTo(this._offset, this._second_coef);\n        }\n    }\n\n    /**\n     * Draw the pairs of triangles.\n     * @private\n     */\n    _drawTriangles() {\n        if (this._hasChamfer()) {\n            this.elCtx.clip();\n        }\n\n        let _triangle_height;\n        this._column_width = this.width / this.columnsPerWidth;\n        let _half_width = this._column_width / 2;\n\n        // Draw each triangle pair.\n        for (let j = 1; j <= this.numberOfPairOfTriangles; j++) {\n\n            // Draw each column.\n            for (let l = 0; l < this.columnsPerWidth; l++) {\n\n                // Thickness of cut lines.\n                this.elCtx.lineWidth = LINE_WIDTH;\n\n                // The offset between each column.\n                this._offset = l * this._column_width;\n\n                _triangle_height = this.height / (this.numberOfPairOfTriangles * 2);\n\n                // Move these coef might glitch everything.\n                this._first_coef = 2 * (_triangle_height * j - _triangle_height);\n                this._second_coef = this._first_coef + (2 * _triangle_height);\n                this._third_coef = ((this._second_coef - _triangle_height) / j) * j;\n\n                // Draw a pair of triangles.\n                for (let k = 1; k <= 2; k++) {\n                    this.elCtx.beginPath();\n                    this.elCtx.moveTo(_half_width + this._offset, this._third_coef);\n\n                    // Draw a triangle with the base at the top or at the bottom.\n                    if (k % 2 === 1) {\n                        this._drawSingleTriangle(true);\n                    } else {\n                        this._drawSingleTriangle(false);\n                    }\n\n                    this.elCtx.closePath();\n                    this._drawStrokes();\n                    this.elCtx.fill();\n                }\n            }\n        }\n\n        if (this._hasChamfer()) {\n            this.elCtx.restore();\n        }\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    _canDownload() {\n        return this.canDownload === true;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    _canDrawTriangle() {\n        return this.enableTriangles === true;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    _canDisplayStrokes() {\n        return this.el_canvas.showStrokes === true;\n    }\n\n    /**\n     * Draw strokes or not.\n     * @private\n     */\n    _drawStrokes() {\n        // If show strokes flag is on.\n        if (this._canDisplayStrokes()) {\n            this.elCtx.strokeStyle = STROKE_COLOR;\n            this.elCtx.stroke();\n        }\n    }\n\n    /**\n     * Render the bookmark.\n     */\n    render() {\n        setTimeout(() => {\n            this._drawBackgroundPattern();\n            if (this._canDrawTriangle()) {\n                this._drawTriangles();\n            }\n        }, TIMEOUT);\n    }\n\n    /**\n     * Function called when all images are loaded.\n     * @param {string} loadedPattern\n     * @private\n     */\n    _triggeredOnPatternsLoaded(loadedPattern) {\n        this.clearCanvasLayers();\n        this.render();\n    }\n}"],"sourceRoot":""}